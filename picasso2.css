/* [Flex-Wrap is used on the blue boxes] Use Grid or Flex */
/* [3+ css units are applied to the html file] Use 3 types of CSS units */
/* [@media query is included at the bottom of the css file]  Set screen sizing */
    /* Desktop: 1680 x 1050 */
    /* iPad: 1024 x 768 */
    /* Mobile: 480 x 320 */
/* [z-index was used to turn circles into semicircles at the top of the page] Incorporate z-index */
/* [css setting are applied ot html, body and footer]
    Incorporate heirarchical selectors */
/* [Shorthand is found in border properties in .moonholder] Incoprorate shorthand properties */
    /* SH properties let you set the values of multiple other CSS poperties simultaneously */
      /* consider font, border, margin padding properties where longhand code can be condensed to a line */
/* [Form is located in the footer section of the html] Add html form that collects names and emails of visitors */
    /* Include submit button...that directs to a different html page */
      /* "you can direct the user to another html page by assigning a value to the <form>'s 'action' attribute */
/* [To be submitted in GitHub repo] Upon completion */
    /* Upload html, css, fromsubmitted.html via GitHub link...set to public */

* {
    margin: 0;
    padding: 0;
    /* width: 900px; */ */
    /* height: auto; */
}

html {
    background-color: rgb(161, 179, 243);
       
}
body { 
    font-family: Arial, Helvetica, sans-serif;
    /* width: 56%; */
}

/* These are the circles at the top */
.moon-container {
    display: flex;
    flex-wrap: wrap;
    width: 100%;
    height: 50px;
    flex-direction: flex-end;

    } 
    .moon-holder {
      /* This includes use of z-index...turning circles into semi circles */
      width: 50px;    
      height: 50px;
      border-radius: 50%;
      padding: 20px;
      /* position: center; */
      justify-content: center;
      border: 3px solid #4e6928;
      z-index: -1;
      
    } 

    /* Border has shorthand properties so many commands appear on one line.  Because this code is after the .moon-holder..the border of the first circle is different. */
    .mh1 {
      background-color: #1c1a04; 
      border: 3px solid rgb(71, 188, 29);
    }
  .mh2 {
    background-color: #e1dfc3
  }
  .mh3 {
    background-color: #b8b698
  }
  .mh4 {
    background-color: #a9a56b
  }
/* This is the first flex container */
  .flex-container {
    height: 300px;
    display: flex;
    flex-wrap: wrap;
    background-color: lightgray;
    justify-content: start;
    align-items: center;
  }

 .item {
    width: 100px;
    height: 100px;
    background: #254de5;
    margin: 10px;
    /* flex: 50%; */
   
  }

.item:nth-of-type(3) {
    align-self: end;
    /* flex: 50%; */
}

.item:nth-of-type(12) {
    align-self: start;
}

.flex-container2 {
    background-color: aquamarine;
    height: 100px;
    display: flex;
    flex-direction: row;
    justify-content: end;
    align-items: center;
}
.item1 {
    width: 100px;
    height: 50px;
    background: #e525a8;
    margin: 10px;
   
  }

.item1:nth-of-type(3) {
    align-self: end;
}

.item1:nth-of-type(12) {
    align-self: start;
}

.item1 {
    width: 100px;
    height: 100px;
    background: #a2769f;
    margin: 10px;
   
  }

.item1:nth-of-type(6) {
    align-self: end;
}

.item1:nth-of-type(15) {
    align-self: start;
}

.wrapper {
    position: relative;
  }

.dashed-box {
    position: top;
    z-index: 1;
    border: dashed;
    height: 2em;
    top: -150px;
    margin-bottom: 1em;
    margin-top: 2em;
    content: "This is ART???"
  }
 
  .green-box {
    position: absolute;
    background: lightgreen;
    width: 20%;
    left: 65%;
    top: -55px;
    height: 7em;
    opacity: 0.9;
  }

/* Read that "In early attempts to target different devices, CSS incorporated different
  media types (screen, print, handheld). The rationale was that by knowing the media type, 
  the proper CSS rules could be applied. However, “handheld” and “screen” devices began to 
  occupy a much wider range of sizes and having only one CSS rule per media device was not 
  sufficient. screen is the media type always used for displaying content, no matter the type 
  of device. The only keyword is added to indicate that this rule only applies to one media 
  type (screen). codeacademy.com topic>mediaqueries*/ 
  /* This example changes the layout of the footer based on screen size */
  @media only screen and (min-width: 480px) {
    footer {
      padding-left: 155px;
      flex-direction: column; 
    }
  }

